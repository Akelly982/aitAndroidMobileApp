package com.aidankelly.projectmanager.database;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.Image;
import android.provider.MediaStore;
import android.widget.ImageView;

import androidx.annotation.Nullable;

import com.aidankelly.projectmanager.R;
import com.aidankelly.projectmanager.entities.UserProject;

import java.io.ByteArrayOutputStream;
import java.net.URI;
import java.net.URL;
import java.sql.Blob;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ProjectDatabaseHelper extends SQLiteOpenHelper {



//    ALEX PADILLA TEACHER CODE EDITED FOR USE WITH APP

    private static final String TAG = ProjectDatabaseHelper.class.getName();

    private static ProjectDatabaseHelper mInstance = null;
    private Context context;

    private ByteArrayOutputStream objectByteArrayOutputStream;    // used to convert image
    private byte[] imageInByteArray;
    private Image defaultImage;

    //create database constants
    private static final String DATABASE_NAME = "UserProject.db";
    private static final Integer DATABASE_VERSION = 1;
    private static final String TABLE_NAME = "UserProject";

    //create constants for the table's column name
    private static final String COL_ID = "ID";
    private static final String COL_PROJECTNAME = "PROJECTNAME";
    private static final String COL_TOTALCOST = "TOTALCOST";
    private static final String COL_PROJECTIMAGE = "IMAGE";


    //create sql statements initial version
    private static final String CREATE_TABLE_ST = "CREATE TABLE " + TABLE_NAME + "(" + COL_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COL_PROJECTNAME + " TEXT, " +
            COL_TOTALCOST + " TEXT, " +
            COL_PROJECTIMAGE + " BLOB )";  // BLOB is for bitmaps

    private static final String DROP_TABLE_ST = "DROP TABLE IF EXISTS " + TABLE_NAME;
    private static final String GET_ALL_ST = "SELECT * FROM " + TABLE_NAME;
    private Bitmap project_default_image;


    // singleton data
    public static synchronized ProjectDatabaseHelper getInstance(Context ctx) {
        if (mInstance == null) {
            mInstance = new ProjectDatabaseHelper(ctx.getApplicationContext());
        }
        return mInstance;
    }

    /**
     * Set the new version of the database (newVersion specified in the constant DATABASE_VERSION),
     * if the database new version is greater than the
     * database version stored inside of the database( oldVersion, written there when the db was created ) then
     * the onUpgrade method will be called.
     *
     * @param context provides access to the Activity resources
     */
    private ProjectDatabaseHelper(@Nullable Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        this.context = context;
    }

    /**
     * this method gets executed only if the database does not exists     // if not exist create
     */
    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        sqLiteDatabase.execSQL(CREATE_TABLE_ST);
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
        sqLiteDatabase.execSQL(DROP_TABLE_ST);
        onCreate(sqLiteDatabase);
    }

    /**     the base idea
     * Add a monster to the database
     * @param name          Monster's name
     * @param description   Monster's description
     * @param scariness     Monster's scariness level
     * @return      if it succeeded, the autogenerated id (primary key) of the recently added monster
     *              otherwise -1
     */
    public Long insertProject(String projectName, Float totalCost, Bitmap projectImage) {    //need to insert byte array from BLOB

        if (projectImage == null){
           projectImage = getDrawableImageDefault();
        }


        // convert bitmap image
        projectImage.compress(Bitmap.CompressFormat.PNG, 100, objectByteArrayOutputStream);
        imageInByteArray = objectByteArrayOutputStream.toByteArray();

        //create an instance of SQLITE database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_PROJECTNAME, projectName);
        contentValues.put(COL_TOTALCOST, totalCost);
        contentValues.put(COL_PROJECTIMAGE, imageInByteArray);

        long result = db.insert(TABLE_NAME, null, contentValues);
        db.close();
        //if result is -1  insert was not performed due to an error, otherwise will have the row ID of the newly inserted row
        return result;
    }

    // get a default image for the UserProject
    private Bitmap getDrawableImageDefault() {
        ImageView myImageView = new ImageView();      // TODO remove this context error
        myImageView.setImageResource(R.drawable.project_default_image);
        BitmapDrawable drawable = (BitmapDrawable) myImageView.getDrawable();
        //BitmapDrawable drawable = (BitmapDrawable) context.getDrawable(R.drawable.project_default_image);   // works with sdk update to 21
        Bitmap bitmap = drawable.getBitmap();
        return bitmap;

    }


    /**
     * Update a monster record in the database
     * @param id            Primary key of the monster
     * @param name          New Monster's name
     * @param description   New Monster's description
     * @param scariness     New Monster's Scariness level
     * @return      true is the monster record in the database was updated, otherwise false.
     */
    public boolean updateProject(Long id, String projectName, Float totalCost, Bitmap projectImage) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();

        contentValues.put(COL_PROJECTNAME, projectName);
        contentValues.put(COL_TOTALCOST, totalCost);
        contentValues.put(COL_PROJECTIMAGE, imageInByteArray);
        //  vvvv is a statement gets data from what follows can be ID = ? AND NAME = ? new String[]{id.toString(), name.toString})
        int numOfRowsUpdated = db.update(TABLE_NAME, contentValues, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsUpdated == 1; //if your query is going to update more than 1 record (this is not the case) then the condition will be numRowsUpdated > 0
    }

    /**
     * Delete a monster from the database
     * @param id    Monster's primary key
     * @return      true if the monster was deleted, otherwise false
     */
    public boolean deleteProject(Long id) {
        SQLiteDatabase db = this.getWritableDatabase();
        //delete return the # of rows affected by the query
        int numOfRowsDeleted = db.delete(TABLE_NAME, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsDeleted == 1;//if your query is going to delete more than 1 record (this is not the case) then the condition will be numOfRowsDeleted > 0
    }

    /**
     * @return an autogenerated image name string value
     */
    private String getRandomImageName() {
        Random ran = new Random();
        int value = ran.nextInt(30) + 1;
        return "monster_" + value;
    }

    /**
     * @return a list of all monsters from the database table called monster
     */
    public List<UserProject> getProject() {
        List<UserProject> monsters = new ArrayList<>();
        Cursor cursor = getAll();

        if(cursor.getCount() > 0) {
            UserProject project;
            while (cursor.moveToNext()) {
                Long id = cursor.getLong(0);
                String name = cursor.getString(1);
                String description = cursor.getString(2);
                Long scariness = cursor.getLong(3);
                String imageFileName = cursor.getString(4);
                Long votes = cursor.getLong(5);
                Long stars = cursor.getLong(6);

                monster = new Monster(id, name, description, scariness, imageFileName, votes, stars);
                monsters.add(monster);
            }
        }
        cursor.close();
        return monsters;
    }

    /**
     * @return  A cursor of all monsters in the table called monster.
     */
    private Cursor getAll() {
        SQLiteDatabase db = this.getReadableDatabase();
        return db.rawQuery(GET_ALL_ST, null);
    }







}
